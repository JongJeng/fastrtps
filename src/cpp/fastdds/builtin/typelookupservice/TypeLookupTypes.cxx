// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeLookupTypes.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TypeLookupTypes.h"
#include "TypeLookupTypesTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace eprosima {

namespace fastrtps {

namespace rtps {


} // namespace rtps
namespace types {


} // namespace types


} // namespace fastrtps
namespace fastdds {

namespace dds {

namespace rpc {



eprosima::fastdds::dds::rpc::RequestHeader::RequestHeader()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::rpc::RequestHeader::~RequestHeader()
{
}

eprosima::fastdds::dds::rpc::RequestHeader::RequestHeader(
        const RequestHeader& x)
{
    m_requestId = x.m_requestId;
    m_instanceName = x.m_instanceName;
}

eprosima::fastdds::dds::rpc::RequestHeader::RequestHeader(
        RequestHeader&& x) noexcept
{
    m_requestId = std::move(x.m_requestId);
    m_instanceName = std::move(x.m_instanceName);
}

eprosima::fastdds::dds::rpc::RequestHeader& eprosima::fastdds::dds::rpc::RequestHeader::operator =(
        const RequestHeader& x)
{

    m_requestId = x.m_requestId;
    m_instanceName = x.m_instanceName;
    return *this;
}

eprosima::fastdds::dds::rpc::RequestHeader& eprosima::fastdds::dds::rpc::RequestHeader::operator =(
        RequestHeader&& x) noexcept
{

    m_requestId = std::move(x.m_requestId);
    m_instanceName = std::move(x.m_instanceName);
    return *this;
}

bool eprosima::fastdds::dds::rpc::RequestHeader::operator ==(
        const RequestHeader& x) const
{
    return (m_requestId == x.m_requestId &&
           m_instanceName == x.m_instanceName);
}

bool eprosima::fastdds::dds::rpc::RequestHeader::operator !=(
        const RequestHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member requestId
 * @param _requestId New value to be copied in member requestId
 */
void eprosima::fastdds::dds::rpc::RequestHeader::requestId(
        const eprosima::fastrtps::rtps::SampleIdentity& _requestId)
{
    m_requestId = _requestId;
}

/*!
 * @brief This function moves the value in member requestId
 * @param _requestId New value to be moved in member requestId
 */
void eprosima::fastdds::dds::rpc::RequestHeader::requestId(
        eprosima::fastrtps::rtps::SampleIdentity&& _requestId)
{
    m_requestId = std::move(_requestId);
}

/*!
 * @brief This function returns a constant reference to member requestId
 * @return Constant reference to member requestId
 */
const eprosima::fastrtps::rtps::SampleIdentity& eprosima::fastdds::dds::rpc::RequestHeader::requestId() const
{
    return m_requestId;
}

/*!
 * @brief This function returns a reference to member requestId
 * @return Reference to member requestId
 */
eprosima::fastrtps::rtps::SampleIdentity& eprosima::fastdds::dds::rpc::RequestHeader::requestId()
{
    return m_requestId;
}


/*!
 * @brief This function copies the value in member instanceName
 * @param _instanceName New value to be copied in member instanceName
 */
void eprosima::fastdds::dds::rpc::RequestHeader::instanceName(
        const eprosima::fastdds::dds::rpc::InstanceName& _instanceName)
{
    m_instanceName = _instanceName;
}

/*!
 * @brief This function moves the value in member instanceName
 * @param _instanceName New value to be moved in member instanceName
 */
void eprosima::fastdds::dds::rpc::RequestHeader::instanceName(
        eprosima::fastdds::dds::rpc::InstanceName&& _instanceName)
{
    m_instanceName = std::move(_instanceName);
}

/*!
 * @brief This function returns a constant reference to member instanceName
 * @return Constant reference to member instanceName
 */
const eprosima::fastdds::dds::rpc::InstanceName& eprosima::fastdds::dds::rpc::RequestHeader::instanceName() const
{
    return m_instanceName;
}

/*!
 * @brief This function returns a reference to member instanceName
 * @return Reference to member instanceName
 */
eprosima::fastdds::dds::rpc::InstanceName& eprosima::fastdds::dds::rpc::RequestHeader::instanceName()
{
    return m_instanceName;
}




eprosima::fastdds::dds::rpc::ReplyHeader::ReplyHeader()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::rpc::ReplyHeader::~ReplyHeader()
{
}

eprosima::fastdds::dds::rpc::ReplyHeader::ReplyHeader(
        const ReplyHeader& x)
{
    m_relatedRequestId = x.m_relatedRequestId;
    m_remoteEx = x.m_remoteEx;
}

eprosima::fastdds::dds::rpc::ReplyHeader::ReplyHeader(
        ReplyHeader&& x) noexcept
{
    m_relatedRequestId = std::move(x.m_relatedRequestId);
    m_remoteEx = x.m_remoteEx;
}

eprosima::fastdds::dds::rpc::ReplyHeader& eprosima::fastdds::dds::rpc::ReplyHeader::operator =(
        const ReplyHeader& x)
{

    m_relatedRequestId = x.m_relatedRequestId;
    m_remoteEx = x.m_remoteEx;
    return *this;
}

eprosima::fastdds::dds::rpc::ReplyHeader& eprosima::fastdds::dds::rpc::ReplyHeader::operator =(
        ReplyHeader&& x) noexcept
{

    m_relatedRequestId = std::move(x.m_relatedRequestId);
    m_remoteEx = x.m_remoteEx;
    return *this;
}

bool eprosima::fastdds::dds::rpc::ReplyHeader::operator ==(
        const ReplyHeader& x) const
{
    return (m_relatedRequestId == x.m_relatedRequestId &&
           m_remoteEx == x.m_remoteEx);
}

bool eprosima::fastdds::dds::rpc::ReplyHeader::operator !=(
        const ReplyHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member relatedRequestId
 * @param _relatedRequestId New value to be copied in member relatedRequestId
 */
void eprosima::fastdds::dds::rpc::ReplyHeader::relatedRequestId(
        const eprosima::fastrtps::rtps::SampleIdentity& _relatedRequestId)
{
    m_relatedRequestId = _relatedRequestId;
}

/*!
 * @brief This function moves the value in member relatedRequestId
 * @param _relatedRequestId New value to be moved in member relatedRequestId
 */
void eprosima::fastdds::dds::rpc::ReplyHeader::relatedRequestId(
        eprosima::fastrtps::rtps::SampleIdentity&& _relatedRequestId)
{
    m_relatedRequestId = std::move(_relatedRequestId);
}

/*!
 * @brief This function returns a constant reference to member relatedRequestId
 * @return Constant reference to member relatedRequestId
 */
const eprosima::fastrtps::rtps::SampleIdentity& eprosima::fastdds::dds::rpc::ReplyHeader::relatedRequestId() const
{
    return m_relatedRequestId;
}

/*!
 * @brief This function returns a reference to member relatedRequestId
 * @return Reference to member relatedRequestId
 */
eprosima::fastrtps::rtps::SampleIdentity& eprosima::fastdds::dds::rpc::ReplyHeader::relatedRequestId()
{
    return m_relatedRequestId;
}


/*!
 * @brief This function sets a value in member remoteEx
 * @param _remoteEx New value for member remoteEx
 */
void eprosima::fastdds::dds::rpc::ReplyHeader::remoteEx(
        eprosima::fastdds::dds::rpc::RemoteExceptionCode_t _remoteEx)
{
    m_remoteEx = _remoteEx;
}

/*!
 * @brief This function returns the value of member remoteEx
 * @return Value of member remoteEx
 */
eprosima::fastdds::dds::rpc::RemoteExceptionCode_t eprosima::fastdds::dds::rpc::ReplyHeader::remoteEx() const
{
    return m_remoteEx;
}

/*!
 * @brief This function returns a reference to member remoteEx
 * @return Reference to member remoteEx
 */
eprosima::fastdds::dds::rpc::RemoteExceptionCode_t& eprosima::fastdds::dds::rpc::ReplyHeader::remoteEx()
{
    return m_remoteEx;
}




} // namespace rpc


} // namespace dds
namespace dds {

namespace builtin {





eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::TypeLookup_getTypes_In()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::~TypeLookup_getTypes_In()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::TypeLookup_getTypes_In(
        const TypeLookup_getTypes_In& x)
{
    m_type_ids = x.m_type_ids;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::TypeLookup_getTypes_In(
        TypeLookup_getTypes_In&& x) noexcept
{
    m_type_ids = std::move(x.m_type_ids);
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::operator =(
        const TypeLookup_getTypes_In& x)
{

    m_type_ids = x.m_type_ids;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::operator =(
        TypeLookup_getTypes_In&& x) noexcept
{

    m_type_ids = std::move(x.m_type_ids);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::operator ==(
        const TypeLookup_getTypes_In& x) const
{
    return (m_type_ids == x.m_type_ids);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::operator !=(
        const TypeLookup_getTypes_In& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member type_ids
 * @param _type_ids New value to be copied in member type_ids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::type_ids(
        const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& _type_ids)
{
    m_type_ids = _type_ids;
}

/*!
 * @brief This function moves the value in member type_ids
 * @param _type_ids New value to be moved in member type_ids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::type_ids(
        std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>&& _type_ids)
{
    m_type_ids = std::move(_type_ids);
}

/*!
 * @brief This function returns a constant reference to member type_ids
 * @return Constant reference to member type_ids
 */
const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::type_ids() const
{
    return m_type_ids;
}

/*!
 * @brief This function returns a reference to member type_ids
 * @return Reference to member type_ids
 */
std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In::type_ids()
{
    return m_type_ids;
}






eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::TypeLookup_getTypes_Out()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::~TypeLookup_getTypes_Out()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::TypeLookup_getTypes_Out(
        const TypeLookup_getTypes_Out& x)
{
    m_types = x.m_types;
    m_complete_to_minimal = x.m_complete_to_minimal;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::TypeLookup_getTypes_Out(
        TypeLookup_getTypes_Out&& x) noexcept
{
    m_types = std::move(x.m_types);
    m_complete_to_minimal = std::move(x.m_complete_to_minimal);
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::operator =(
        const TypeLookup_getTypes_Out& x)
{

    m_types = x.m_types;
    m_complete_to_minimal = x.m_complete_to_minimal;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::operator =(
        TypeLookup_getTypes_Out&& x) noexcept
{

    m_types = std::move(x.m_types);
    m_complete_to_minimal = std::move(x.m_complete_to_minimal);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::operator ==(
        const TypeLookup_getTypes_Out& x) const
{
    return (m_types == x.m_types &&
           m_complete_to_minimal == x.m_complete_to_minimal);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::operator !=(
        const TypeLookup_getTypes_Out& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member types
 * @param _types New value to be copied in member types
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::types(
        const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierTypeObjectPair>& _types)
{
    m_types = _types;
}

/*!
 * @brief This function moves the value in member types
 * @param _types New value to be moved in member types
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::types(
        std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierTypeObjectPair>&& _types)
{
    m_types = std::move(_types);
}

/*!
 * @brief This function returns a constant reference to member types
 * @return Constant reference to member types
 */
const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierTypeObjectPair>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::types() const
{
    return m_types;
}

/*!
 * @brief This function returns a reference to member types
 * @return Reference to member types
 */
std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierTypeObjectPair>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::types()
{
    return m_types;
}


/*!
 * @brief This function copies the value in member complete_to_minimal
 * @param _complete_to_minimal New value to be copied in member complete_to_minimal
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::complete_to_minimal(
        const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierPair>& _complete_to_minimal)
{
    m_complete_to_minimal = _complete_to_minimal;
}

/*!
 * @brief This function moves the value in member complete_to_minimal
 * @param _complete_to_minimal New value to be moved in member complete_to_minimal
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::complete_to_minimal(
        std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierPair>&& _complete_to_minimal)
{
    m_complete_to_minimal = std::move(_complete_to_minimal);
}

/*!
 * @brief This function returns a constant reference to member complete_to_minimal
 * @return Constant reference to member complete_to_minimal
 */
const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierPair>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::complete_to_minimal() const
{
    return m_complete_to_minimal;
}

/*!
 * @brief This function returns a reference to member complete_to_minimal
 * @return Reference to member complete_to_minimal
 */
std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifierPair>& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out::complete_to_minimal()
{
    return m_complete_to_minimal;
}




eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::TypeLookup_getTypes_Result()
{
    m__d = ReturnCode_t::RETCODE_OK;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::~TypeLookup_getTypes_Result()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::TypeLookup_getTypes_Result(
        const TypeLookup_getTypes_Result& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = x.m_result;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::TypeLookup_getTypes_Result(
        TypeLookup_getTypes_Result&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = std::move(x.m_result);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::operator =(
        const TypeLookup_getTypes_Result& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = x.m_result;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::operator =(
        TypeLookup_getTypes_Result&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = std::move(x.m_result);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::operator ==(
        const TypeLookup_getTypes_Result& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            return (m_result == x.m_result);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::operator !=(
        const TypeLookup_getTypes_Result& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::_d(
        int32_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            switch (__d)
            {
                case ReturnCode_t::RETCODE_OK:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::_d() const
{
    return m__d;
}

int32_t& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::result(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out& _result)
{
    m_result = _result;
    m__d = ReturnCode_t::RETCODE_OK;

}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::result(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out&& _result)
{
    m_result = std::move(_result);
    m__d = ReturnCode_t::RETCODE_OK;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::result() const
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_result;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result::result()
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_result;
}






eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::TypeLookup_getTypeDependencies_In()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::~TypeLookup_getTypeDependencies_In()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::TypeLookup_getTypeDependencies_In(
        const TypeLookup_getTypeDependencies_In& x)
{
    m_type_ids = x.m_type_ids;
    m_continuation_point = x.m_continuation_point;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::TypeLookup_getTypeDependencies_In(
        TypeLookup_getTypeDependencies_In&& x) noexcept
{
    m_type_ids = std::move(x.m_type_ids);
    m_continuation_point = std::move(x.m_continuation_point);
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::operator =(
        const TypeLookup_getTypeDependencies_In& x)
{

    m_type_ids = x.m_type_ids;
    m_continuation_point = x.m_continuation_point;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::operator =(
        TypeLookup_getTypeDependencies_In&& x) noexcept
{

    m_type_ids = std::move(x.m_type_ids);
    m_continuation_point = std::move(x.m_continuation_point);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::operator ==(
        const TypeLookup_getTypeDependencies_In& x) const
{
    return (m_type_ids == x.m_type_ids &&
           m_continuation_point == x.m_continuation_point);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::operator !=(
        const TypeLookup_getTypeDependencies_In& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member type_ids
 * @param _type_ids New value to be copied in member type_ids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::type_ids(
        const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& _type_ids)
{
    m_type_ids = _type_ids;
}

/*!
 * @brief This function moves the value in member type_ids
 * @param _type_ids New value to be moved in member type_ids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::type_ids(
        std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>&& _type_ids)
{
    m_type_ids = std::move(_type_ids);
}

/*!
 * @brief This function returns a constant reference to member type_ids
 * @return Constant reference to member type_ids
 */
const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::type_ids() const
{
    return m_type_ids;
}

/*!
 * @brief This function returns a reference to member type_ids
 * @return Reference to member type_ids
 */
std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentifier>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::type_ids()
{
    return m_type_ids;
}


/*!
 * @brief This function copies the value in member continuation_point
 * @param _continuation_point New value to be copied in member continuation_point
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::continuation_point(
        const std::vector<uint8_t>& _continuation_point)
{
    m_continuation_point = _continuation_point;
}

/*!
 * @brief This function moves the value in member continuation_point
 * @param _continuation_point New value to be moved in member continuation_point
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::continuation_point(
        std::vector<uint8_t>&& _continuation_point)
{
    m_continuation_point = std::move(_continuation_point);
}

/*!
 * @brief This function returns a constant reference to member continuation_point
 * @return Constant reference to member continuation_point
 */
const std::vector<uint8_t>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::continuation_point() const
{
    return m_continuation_point;
}

/*!
 * @brief This function returns a reference to member continuation_point
 * @return Reference to member continuation_point
 */
std::vector<uint8_t>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In::continuation_point()
{
    return m_continuation_point;
}






eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::TypeLookup_getTypeDependencies_Out()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::~TypeLookup_getTypeDependencies_Out()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::TypeLookup_getTypeDependencies_Out(
        const TypeLookup_getTypeDependencies_Out& x)
{
    m_dependent_typeids = x.m_dependent_typeids;
    m_continuation_point = x.m_continuation_point;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::TypeLookup_getTypeDependencies_Out(
        TypeLookup_getTypeDependencies_Out&& x) noexcept
{
    m_dependent_typeids = std::move(x.m_dependent_typeids);
    m_continuation_point = std::move(x.m_continuation_point);
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::operator =(
        const TypeLookup_getTypeDependencies_Out& x)
{

    m_dependent_typeids = x.m_dependent_typeids;
    m_continuation_point = x.m_continuation_point;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::operator =(
        TypeLookup_getTypeDependencies_Out&& x) noexcept
{

    m_dependent_typeids = std::move(x.m_dependent_typeids);
    m_continuation_point = std::move(x.m_continuation_point);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::operator ==(
        const TypeLookup_getTypeDependencies_Out& x) const
{
    return (m_dependent_typeids == x.m_dependent_typeids &&
           m_continuation_point == x.m_continuation_point);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::operator !=(
        const TypeLookup_getTypeDependencies_Out& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member dependent_typeids
 * @param _dependent_typeids New value to be copied in member dependent_typeids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::dependent_typeids(
        const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentfierWithSize>& _dependent_typeids)
{
    m_dependent_typeids = _dependent_typeids;
}

/*!
 * @brief This function moves the value in member dependent_typeids
 * @param _dependent_typeids New value to be moved in member dependent_typeids
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::dependent_typeids(
        std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentfierWithSize>&& _dependent_typeids)
{
    m_dependent_typeids = std::move(_dependent_typeids);
}

/*!
 * @brief This function returns a constant reference to member dependent_typeids
 * @return Constant reference to member dependent_typeids
 */
const std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentfierWithSize>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::dependent_typeids() const
{
    return m_dependent_typeids;
}

/*!
 * @brief This function returns a reference to member dependent_typeids
 * @return Reference to member dependent_typeids
 */
std::vector<eprosima::fastdds::dds::xtypes1_3::TypeIdentfierWithSize>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::dependent_typeids()
{
    return m_dependent_typeids;
}


/*!
 * @brief This function copies the value in member continuation_point
 * @param _continuation_point New value to be copied in member continuation_point
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::continuation_point(
        const std::vector<uint8_t>& _continuation_point)
{
    m_continuation_point = _continuation_point;
}

/*!
 * @brief This function moves the value in member continuation_point
 * @param _continuation_point New value to be moved in member continuation_point
 */
void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::continuation_point(
        std::vector<uint8_t>&& _continuation_point)
{
    m_continuation_point = std::move(_continuation_point);
}

/*!
 * @brief This function returns a constant reference to member continuation_point
 * @return Constant reference to member continuation_point
 */
const std::vector<uint8_t>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::continuation_point() const
{
    return m_continuation_point;
}

/*!
 * @brief This function returns a reference to member continuation_point
 * @return Reference to member continuation_point
 */
std::vector<uint8_t>& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out::continuation_point()
{
    return m_continuation_point;
}




eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::TypeLookup_getTypeDependencies_Result()
{
    m__d = ReturnCode_t::RETCODE_OK;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::~TypeLookup_getTypeDependencies_Result()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::TypeLookup_getTypeDependencies_Result(
        const TypeLookup_getTypeDependencies_Result& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = x.m_result;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::TypeLookup_getTypeDependencies_Result(
        TypeLookup_getTypeDependencies_Result&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = std::move(x.m_result);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::operator =(
        const TypeLookup_getTypeDependencies_Result& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = x.m_result;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::operator =(
        TypeLookup_getTypeDependencies_Result&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            m_result = std::move(x.m_result);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::operator ==(
        const TypeLookup_getTypeDependencies_Result& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            return (m_result == x.m_result);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::operator !=(
        const TypeLookup_getTypeDependencies_Result& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::_d(
        int32_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            switch (__d)
            {
                case ReturnCode_t::RETCODE_OK:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::_d() const
{
    return m__d;
}

int32_t& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::result(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out& _result)
{
    m_result = _result;
    m__d = ReturnCode_t::RETCODE_OK;

}

void eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::result(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out&& _result)
{
    m_result = std::move(_result);
    m__d = ReturnCode_t::RETCODE_OK;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::result() const
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_result;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Out& eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result::result()
{
    bool b = false;

    switch (m__d)
    {
        case ReturnCode_t::RETCODE_OK:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_result;
}




eprosima::fastdds::dds::builtin::TypeLookup_Call::TypeLookup_Call()
{
    m__d = TypeLookup_getTypes_HashId;
}

eprosima::fastdds::dds::builtin::TypeLookup_Call::~TypeLookup_Call()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_Call::TypeLookup_Call(
        const TypeLookup_Call& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getTypes = x.m_getTypes;
            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = x.m_getTypeDependencies;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_Call::TypeLookup_Call(
        TypeLookup_Call&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getTypes = std::move(x.m_getTypes);

            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = std::move(x.m_getTypeDependencies);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_Call& eprosima::fastdds::dds::builtin::TypeLookup_Call::operator =(
        const TypeLookup_Call& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getTypes = x.m_getTypes;
            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = x.m_getTypeDependencies;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_Call& eprosima::fastdds::dds::builtin::TypeLookup_Call::operator =(
        TypeLookup_Call&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getTypes = std::move(x.m_getTypes);

            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = std::move(x.m_getTypeDependencies);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Call::operator ==(
        const TypeLookup_Call& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            return (m_getTypes == x.m_getTypes);
            break;


        case TypeLookup_getDependencies_HashId:
            return (m_getTypeDependencies == x.m_getTypeDependencies);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Call::operator !=(
        const TypeLookup_Call& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::builtin::TypeLookup_Call::_d(
        int32_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            switch (__d)
            {
                case TypeLookup_getTypes_HashId:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TypeLookup_getDependencies_HashId:
            switch (__d)
            {
                case TypeLookup_getDependencies_HashId:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t eprosima::fastdds::dds::builtin::TypeLookup_Call::_d() const
{
    return m__d;
}

int32_t& eprosima::fastdds::dds::builtin::TypeLookup_Call::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypes(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In& _getTypes)
{
    m_getTypes = _getTypes;
    m__d = TypeLookup_getTypes_HashId;

}

void eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypes(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In&& _getTypes)
{
    m_getTypes = std::move(_getTypes);
    m__d = TypeLookup_getTypes_HashId;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In& eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypes() const
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypes;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_In& eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypes()
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypes;
}


void eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypeDependencies(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In& _getTypeDependencies)
{
    m_getTypeDependencies = _getTypeDependencies;
    m__d = TypeLookup_getDependencies_HashId;

}

void eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypeDependencies(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In&& _getTypeDependencies)
{
    m_getTypeDependencies = std::move(_getTypeDependencies);
    m__d = TypeLookup_getDependencies_HashId;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In& eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypeDependencies() const
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getDependencies_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypeDependencies;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_In& eprosima::fastdds::dds::builtin::TypeLookup_Call::getTypeDependencies()
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getDependencies_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypeDependencies;
}




eprosima::fastdds::dds::builtin::TypeLookup_Request::TypeLookup_Request()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_Request::~TypeLookup_Request()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_Request::TypeLookup_Request(
        const TypeLookup_Request& x)
{
    m_header = x.m_header;
    m_data = x.m_data;
}

eprosima::fastdds::dds::builtin::TypeLookup_Request::TypeLookup_Request(
        TypeLookup_Request&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
}

eprosima::fastdds::dds::builtin::TypeLookup_Request& eprosima::fastdds::dds::builtin::TypeLookup_Request::operator =(
        const TypeLookup_Request& x)
{

    m_header = x.m_header;
    m_data = x.m_data;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_Request& eprosima::fastdds::dds::builtin::TypeLookup_Request::operator =(
        TypeLookup_Request&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Request::operator ==(
        const TypeLookup_Request& x) const
{
    return (m_header == x.m_header &&
           m_data == x.m_data);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Request::operator !=(
        const TypeLookup_Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Request::header(
        const eprosima::fastdds::dds::rpc::RequestHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Request::header(
        eprosima::fastdds::dds::rpc::RequestHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::rpc::RequestHeader& eprosima::fastdds::dds::builtin::TypeLookup_Request::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::rpc::RequestHeader& eprosima::fastdds::dds::builtin::TypeLookup_Request::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Request::data(
        const eprosima::fastdds::dds::builtin::TypeLookup_Call& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Request::data(
        eprosima::fastdds::dds::builtin::TypeLookup_Call&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastdds::dds::builtin::TypeLookup_Call& eprosima::fastdds::dds::builtin::TypeLookup_Request::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastdds::dds::builtin::TypeLookup_Call& eprosima::fastdds::dds::builtin::TypeLookup_Request::data()
{
    return m_data;
}




eprosima::fastdds::dds::builtin::TypeLookup_Return::TypeLookup_Return()
{
    m__d = TypeLookup_getTypes_HashId;
}

eprosima::fastdds::dds::builtin::TypeLookup_Return::~TypeLookup_Return()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_Return::TypeLookup_Return(
        const TypeLookup_Return& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getType = x.m_getType;
            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = x.m_getTypeDependencies;
            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_Return::TypeLookup_Return(
        TypeLookup_Return&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getType = std::move(x.m_getType);

            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = std::move(x.m_getTypeDependencies);

            break;

        default:
            break;
    }
}

eprosima::fastdds::dds::builtin::TypeLookup_Return& eprosima::fastdds::dds::builtin::TypeLookup_Return::operator =(
        const TypeLookup_Return& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getType = x.m_getType;
            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = x.m_getTypeDependencies;
            break;

        default:
            break;
    }

    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_Return& eprosima::fastdds::dds::builtin::TypeLookup_Return::operator =(
        TypeLookup_Return&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            m_getType = std::move(x.m_getType);

            break;


        case TypeLookup_getDependencies_HashId:
            m_getTypeDependencies = std::move(x.m_getTypeDependencies);

            break;

        default:
            break;
    }

    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Return::operator ==(
        const TypeLookup_Return& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            return (m_getType == x.m_getType);
            break;


        case TypeLookup_getDependencies_HashId:
            return (m_getTypeDependencies == x.m_getTypeDependencies);
            break;

        default:
            break;
    }
    return false;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Return::operator !=(
        const TypeLookup_Return& x) const
{
    return !(*this == x);
}

void eprosima::fastdds::dds::builtin::TypeLookup_Return::_d(
        int32_t __d)
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            switch (__d)
            {
                case TypeLookup_getTypes_HashId:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case TypeLookup_getDependencies_HashId:
            switch (__d)
            {
                case TypeLookup_getDependencies_HashId:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t eprosima::fastdds::dds::builtin::TypeLookup_Return::_d() const
{
    return m__d;
}

int32_t& eprosima::fastdds::dds::builtin::TypeLookup_Return::_d()
{
    return m__d;
}

void eprosima::fastdds::dds::builtin::TypeLookup_Return::getType(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result& _getType)
{
    m_getType = _getType;
    m__d = TypeLookup_getTypes_HashId;

}

void eprosima::fastdds::dds::builtin::TypeLookup_Return::getType(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result&& _getType)
{
    m_getType = std::move(_getType);
    m__d = TypeLookup_getTypes_HashId;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result& eprosima::fastdds::dds::builtin::TypeLookup_Return::getType() const
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getType;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypes_Result& eprosima::fastdds::dds::builtin::TypeLookup_Return::getType()
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getTypes_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getType;
}


void eprosima::fastdds::dds::builtin::TypeLookup_Return::getTypeDependencies(
        const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result& _getTypeDependencies)
{
    m_getTypeDependencies = _getTypeDependencies;
    m__d = TypeLookup_getDependencies_HashId;

}

void eprosima::fastdds::dds::builtin::TypeLookup_Return::getTypeDependencies(
        eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result&& _getTypeDependencies)
{
    m_getTypeDependencies = std::move(_getTypeDependencies);
    m__d = TypeLookup_getDependencies_HashId;

}

const eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result& eprosima::fastdds::dds::builtin::TypeLookup_Return::getTypeDependencies() const
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getDependencies_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypeDependencies;
}

eprosima::fastdds::dds::builtin::TypeLookup_getTypeDependencies_Result& eprosima::fastdds::dds::builtin::TypeLookup_Return::getTypeDependencies()
{
    bool b = false;

    switch (m__d)
    {
        case TypeLookup_getDependencies_HashId:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getTypeDependencies;
}




eprosima::fastdds::dds::builtin::TypeLookup_Reply::TypeLookup_Reply()
{
    // Just to register all known types
    registerTypeLookupTypesTypes();
}

eprosima::fastdds::dds::builtin::TypeLookup_Reply::~TypeLookup_Reply()
{
}

eprosima::fastdds::dds::builtin::TypeLookup_Reply::TypeLookup_Reply(
        const TypeLookup_Reply& x)
{
    m_header = x.m_header;
    m_return_value = x.m_return_value;
}

eprosima::fastdds::dds::builtin::TypeLookup_Reply::TypeLookup_Reply(
        TypeLookup_Reply&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_return_value = std::move(x.m_return_value);
}

eprosima::fastdds::dds::builtin::TypeLookup_Reply& eprosima::fastdds::dds::builtin::TypeLookup_Reply::operator =(
        const TypeLookup_Reply& x)
{

    m_header = x.m_header;
    m_return_value = x.m_return_value;
    return *this;
}

eprosima::fastdds::dds::builtin::TypeLookup_Reply& eprosima::fastdds::dds::builtin::TypeLookup_Reply::operator =(
        TypeLookup_Reply&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_return_value = std::move(x.m_return_value);
    return *this;
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Reply::operator ==(
        const TypeLookup_Reply& x) const
{
    return (m_header == x.m_header &&
           m_return_value == x.m_return_value);
}

bool eprosima::fastdds::dds::builtin::TypeLookup_Reply::operator !=(
        const TypeLookup_Reply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Reply::header(
        const eprosima::fastdds::dds::rpc::ReplyHeader& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Reply::header(
        eprosima::fastdds::dds::rpc::ReplyHeader&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const eprosima::fastdds::dds::rpc::ReplyHeader& eprosima::fastdds::dds::builtin::TypeLookup_Reply::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
eprosima::fastdds::dds::rpc::ReplyHeader& eprosima::fastdds::dds::builtin::TypeLookup_Reply::header()
{
    return m_header;
}


/*!
 * @brief This function copies the value in member return_value
 * @param _return_value New value to be copied in member return_value
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Reply::return_value(
        const eprosima::fastdds::dds::builtin::TypeLookup_Return& _return_value)
{
    m_return_value = _return_value;
}

/*!
 * @brief This function moves the value in member return_value
 * @param _return_value New value to be moved in member return_value
 */
void eprosima::fastdds::dds::builtin::TypeLookup_Reply::return_value(
        eprosima::fastdds::dds::builtin::TypeLookup_Return&& _return_value)
{
    m_return_value = std::move(_return_value);
}

/*!
 * @brief This function returns a constant reference to member return_value
 * @return Constant reference to member return_value
 */
const eprosima::fastdds::dds::builtin::TypeLookup_Return& eprosima::fastdds::dds::builtin::TypeLookup_Reply::return_value() const
{
    return m_return_value;
}

/*!
 * @brief This function returns a reference to member return_value
 * @return Reference to member return_value
 */
eprosima::fastdds::dds::builtin::TypeLookup_Return& eprosima::fastdds::dds::builtin::TypeLookup_Reply::return_value()
{
    return m_return_value;
}




} // namespace builtin


} // namespace dds


} // namespace fastdds


} // namespace eprosima
// Include auxiliary functions like for serializing/deserializing.
#include "TypeLookupTypesCdrAux.ipp"
