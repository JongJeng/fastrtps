// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeLookupServiceTypes.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TypeLookupServiceTypes.h"
#include "TypeLookupServiceTypesTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






BasicStruct::BasicStruct()
{
    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

BasicStruct::~BasicStruct()
{
}

BasicStruct::BasicStruct(
        const BasicStruct& x)
{
    m_message = x.m_message;
}

BasicStruct::BasicStruct(
        BasicStruct&& x) noexcept
{
    m_message = std::move(x.m_message);
}

BasicStruct& BasicStruct::operator =(
        const BasicStruct& x)
{

    m_message = x.m_message;
    return *this;
}

BasicStruct& BasicStruct::operator =(
        BasicStruct&& x) noexcept
{

    m_message = std::move(x.m_message);
    return *this;
}

bool BasicStruct::operator ==(
        const BasicStruct& x) const
{
    return (m_message == x.m_message);
}

bool BasicStruct::operator !=(
        const BasicStruct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void BasicStruct::message(
        const std::vector<char>& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void BasicStruct::message(
        std::vector<char>&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::vector<char>& BasicStruct::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::vector<char>& BasicStruct::message()
{
    return m_message;
}




StructStruct::StructStruct()
{
    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

StructStruct::~StructStruct()
{
}

StructStruct::StructStruct(
        const StructStruct& x)
{
    m_basic = x.m_basic;
    m_index = x.m_index;
}

StructStruct::StructStruct(
        StructStruct&& x) noexcept
{
    m_basic = std::move(x.m_basic);
    m_index = x.m_index;
}

StructStruct& StructStruct::operator =(
        const StructStruct& x)
{

    m_basic = x.m_basic;
    m_index = x.m_index;
    return *this;
}

StructStruct& StructStruct::operator =(
        StructStruct&& x) noexcept
{

    m_basic = std::move(x.m_basic);
    m_index = x.m_index;
    return *this;
}

bool StructStruct::operator ==(
        const StructStruct& x) const
{
    return (m_basic == x.m_basic &&
           m_index == x.m_index);
}

bool StructStruct::operator !=(
        const StructStruct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member basic
 * @param _basic New value to be copied in member basic
 */
void StructStruct::basic(
        const BasicStruct& _basic)
{
    m_basic = _basic;
}

/*!
 * @brief This function moves the value in member basic
 * @param _basic New value to be moved in member basic
 */
void StructStruct::basic(
        BasicStruct&& _basic)
{
    m_basic = std::move(_basic);
}

/*!
 * @brief This function returns a constant reference to member basic
 * @return Constant reference to member basic
 */
const BasicStruct& StructStruct::basic() const
{
    return m_basic;
}

/*!
 * @brief This function returns a reference to member basic
 * @return Reference to member basic
 */
BasicStruct& StructStruct::basic()
{
    return m_basic;
}


/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void StructStruct::index(
        uint16_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint16_t StructStruct::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint16_t& StructStruct::index()
{
    return m_index;
}




InheritanceStruct::InheritanceStruct()
    : BasicStruct()

{
    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

InheritanceStruct::~InheritanceStruct()
{
}

InheritanceStruct::InheritanceStruct(
        const InheritanceStruct& x)
    : BasicStruct(x)

{
    m_another_index = x.m_another_index;
}

InheritanceStruct::InheritanceStruct(
        InheritanceStruct&& x) noexcept
    : BasicStruct(std::move(x))

{
    m_another_index = x.m_another_index;
}

InheritanceStruct& InheritanceStruct::operator =(
        const InheritanceStruct& x)
{
    BasicStruct::operator =(x);

    m_another_index = x.m_another_index;
    return *this;
}

InheritanceStruct& InheritanceStruct::operator =(
        InheritanceStruct&& x) noexcept
{
    BasicStruct::operator =(std::move(x));

    m_another_index = x.m_another_index;
    return *this;
}

bool InheritanceStruct::operator ==(
        const InheritanceStruct& x) const
{
    if (BasicStruct::operator !=(x))
        {
            return false;
        }
    return (m_another_index == x.m_another_index);
}

bool InheritanceStruct::operator !=(
        const InheritanceStruct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member another_index
 * @param _another_index New value for member another_index
 */
void InheritanceStruct::another_index(
        uint16_t _another_index)
{
    m_another_index = _another_index;
}

/*!
 * @brief This function returns the value of member another_index
 * @return Value of member another_index
 */
uint16_t InheritanceStruct::another_index() const
{
    return m_another_index;
}

/*!
 * @brief This function returns a reference to member another_index
 * @return Reference to member another_index
 */
uint16_t& InheritanceStruct::another_index()
{
    return m_another_index;
}




AnotherBasicStruct::AnotherBasicStruct()
{
    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

AnotherBasicStruct::~AnotherBasicStruct()
{
}

AnotherBasicStruct::AnotherBasicStruct(
        const AnotherBasicStruct& x)
{
    m_number = x.m_number;
}

AnotherBasicStruct::AnotherBasicStruct(
        AnotherBasicStruct&& x) noexcept
{
    m_number = x.m_number;
}

AnotherBasicStruct& AnotherBasicStruct::operator =(
        const AnotherBasicStruct& x)
{

    m_number = x.m_number;
    return *this;
}

AnotherBasicStruct& AnotherBasicStruct::operator =(
        AnotherBasicStruct&& x) noexcept
{

    m_number = x.m_number;
    return *this;
}

bool AnotherBasicStruct::operator ==(
        const AnotherBasicStruct& x) const
{
    return (m_number == x.m_number);
}

bool AnotherBasicStruct::operator !=(
        const AnotherBasicStruct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member number
 * @param _number New value for member number
 */
void AnotherBasicStruct::number(
        int32_t _number)
{
    m_number = _number;
}

/*!
 * @brief This function returns the value of member number
 * @return Value of member number
 */
int32_t AnotherBasicStruct::number() const
{
    return m_number;
}

/*!
 * @brief This function returns a reference to member number
 * @return Reference to member number
 */
int32_t& AnotherBasicStruct::number()
{
    return m_number;
}









AnotherInheritanceStruct::AnotherInheritanceStruct()
    : StructStruct()

{
    // Just to register all known types
    registerTypeLookupServiceTypesTypes();
}

AnotherInheritanceStruct::~AnotherInheritanceStruct()
{
}

AnotherInheritanceStruct::AnotherInheritanceStruct(
        const AnotherInheritanceStruct& x)
    : StructStruct(x)

{
    m_complex_map = x.m_complex_map;
}

AnotherInheritanceStruct::AnotherInheritanceStruct(
        AnotherInheritanceStruct&& x) noexcept
    : StructStruct(std::move(x))

{
    m_complex_map = std::move(x.m_complex_map);
}

AnotherInheritanceStruct& AnotherInheritanceStruct::operator =(
        const AnotherInheritanceStruct& x)
{
    StructStruct::operator =(x);

    m_complex_map = x.m_complex_map;
    return *this;
}

AnotherInheritanceStruct& AnotherInheritanceStruct::operator =(
        AnotherInheritanceStruct&& x) noexcept
{
    StructStruct::operator =(std::move(x));

    m_complex_map = std::move(x.m_complex_map);
    return *this;
}

bool AnotherInheritanceStruct::operator ==(
        const AnotherInheritanceStruct& x) const
{
    if (StructStruct::operator !=(x))
        {
            return false;
        }
    return (m_complex_map == x.m_complex_map);
}

bool AnotherInheritanceStruct::operator !=(
        const AnotherInheritanceStruct& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member complex_map
 * @param _complex_map New value to be copied in member complex_map
 */
void AnotherInheritanceStruct::complex_map(
        const std::map<std::string, complex_sequence>& _complex_map)
{
    m_complex_map = _complex_map;
}

/*!
 * @brief This function moves the value in member complex_map
 * @param _complex_map New value to be moved in member complex_map
 */
void AnotherInheritanceStruct::complex_map(
        std::map<std::string, complex_sequence>&& _complex_map)
{
    m_complex_map = std::move(_complex_map);
}

/*!
 * @brief This function returns a constant reference to member complex_map
 * @return Constant reference to member complex_map
 */
const std::map<std::string, complex_sequence>& AnotherInheritanceStruct::complex_map() const
{
    return m_complex_map;
}

/*!
 * @brief This function returns a reference to member complex_map
 * @return Reference to member complex_map
 */
std::map<std::string, complex_sequence>& AnotherInheritanceStruct::complex_map()
{
    return m_complex_map;
}


// Include auxiliary functions like for serializing/deserializing.
#include "TypeLookupServiceTypesCdrAux.ipp"
