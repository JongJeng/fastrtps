// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeLookupServiceTypes.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_TYPELOOKUPSERVICETYPES_H_
#define _FAST_DDS_GENERATED_TYPELOOKUPSERVICETYPES_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPELOOKUPSERVICETYPES_SOURCE)
#define TYPELOOKUPSERVICETYPES_DllAPI __declspec( dllexport )
#else
#define TYPELOOKUPSERVICETYPES_DllAPI __declspec( dllimport )
#endif // TYPELOOKUPSERVICETYPES_SOURCE
#else
#define TYPELOOKUPSERVICETYPES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPELOOKUPSERVICETYPES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima







/*!
 * @brief This class represents the structure BasicStruct defined by the user in the IDL file.
 * @ingroup TypeLookupServiceTypes
 */
class BasicStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BasicStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BasicStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct(
            const BasicStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct(
            BasicStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct& operator =(
            const BasicStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct& operator =(
            BasicStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BasicStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BasicStruct& x) const;

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::vector<char>& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::vector<char>&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::vector<char>& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::vector<char>& message();

private:

    std::vector<char> m_message;

};


/*!
 * @brief This class represents the structure StructStruct defined by the user in the IDL file.
 * @ingroup TypeLookupServiceTypes
 */
class StructStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructStruct that will be copied.
     */
    eProsima_user_DllExport StructStruct(
            const StructStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructStruct that will be copied.
     */
    eProsima_user_DllExport StructStruct(
            StructStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructStruct that will be copied.
     */
    eProsima_user_DllExport StructStruct& operator =(
            const StructStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructStruct that will be copied.
     */
    eProsima_user_DllExport StructStruct& operator =(
            StructStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructStruct& x) const;

    /*!
     * @brief This function copies the value in member basic
     * @param _basic New value to be copied in member basic
     */
    eProsima_user_DllExport void basic(
            const BasicStruct& _basic);

    /*!
     * @brief This function moves the value in member basic
     * @param _basic New value to be moved in member basic
     */
    eProsima_user_DllExport void basic(
            BasicStruct&& _basic);

    /*!
     * @brief This function returns a constant reference to member basic
     * @return Constant reference to member basic
     */
    eProsima_user_DllExport const BasicStruct& basic() const;

    /*!
     * @brief This function returns a reference to member basic
     * @return Reference to member basic
     */
    eProsima_user_DllExport BasicStruct& basic();


    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint16_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint16_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint16_t& index();

private:

    BasicStruct m_basic;
    uint16_t m_index{0};

};


/*!
 * @brief This class represents the structure InheritanceStruct defined by the user in the IDL file.
 * @ingroup TypeLookupServiceTypes
 */
class InheritanceStruct : public BasicStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InheritanceStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceStruct(
            const InheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InheritanceStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceStruct(
            InheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InheritanceStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceStruct& operator =(
            const InheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InheritanceStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceStruct& operator =(
            InheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InheritanceStruct& x) const;

    /*!
     * @brief This function sets a value in member another_index
     * @param _another_index New value for member another_index
     */
    eProsima_user_DllExport void another_index(
            uint16_t _another_index);

    /*!
     * @brief This function returns the value of member another_index
     * @return Value of member another_index
     */
    eProsima_user_DllExport uint16_t another_index() const;

    /*!
     * @brief This function returns a reference to member another_index
     * @return Reference to member another_index
     */
    eProsima_user_DllExport uint16_t& another_index();

private:

    uint16_t m_another_index{0};

};


/*!
 * @brief This class represents the structure AnotherBasicStruct defined by the user in the IDL file.
 * @ingroup TypeLookupServiceTypes
 */
class AnotherBasicStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AnotherBasicStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AnotherBasicStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AnotherBasicStruct that will be copied.
     */
    eProsima_user_DllExport AnotherBasicStruct(
            const AnotherBasicStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AnotherBasicStruct that will be copied.
     */
    eProsima_user_DllExport AnotherBasicStruct(
            AnotherBasicStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AnotherBasicStruct that will be copied.
     */
    eProsima_user_DllExport AnotherBasicStruct& operator =(
            const AnotherBasicStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AnotherBasicStruct that will be copied.
     */
    eProsima_user_DllExport AnotherBasicStruct& operator =(
            AnotherBasicStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AnotherBasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AnotherBasicStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AnotherBasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AnotherBasicStruct& x) const;

    /*!
     * @brief This function sets a value in member number
     * @param _number New value for member number
     */
    eProsima_user_DllExport void number(
            int32_t _number);

    /*!
     * @brief This function returns the value of member number
     * @return Value of member number
     */
    eProsima_user_DllExport int32_t number() const;

    /*!
     * @brief This function returns a reference to member number
     * @return Reference to member number
     */
    eProsima_user_DllExport int32_t& number();

private:

    int32_t m_number{0};

};


typedef std::vector<AnotherBasicStruct> complex_sequence;





/*!
 * @brief This class represents the structure AnotherInheritanceStruct defined by the user in the IDL file.
 * @ingroup TypeLookupServiceTypes
 */
class AnotherInheritanceStruct : public StructStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AnotherInheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AnotherInheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AnotherInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AnotherInheritanceStruct(
            const AnotherInheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AnotherInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AnotherInheritanceStruct(
            AnotherInheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AnotherInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AnotherInheritanceStruct& operator =(
            const AnotherInheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AnotherInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AnotherInheritanceStruct& operator =(
            AnotherInheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AnotherInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AnotherInheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AnotherInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AnotherInheritanceStruct& x) const;

    /*!
     * @brief This function copies the value in member complex_map
     * @param _complex_map New value to be copied in member complex_map
     */
    eProsima_user_DllExport void complex_map(
            const std::map<std::string, complex_sequence>& _complex_map);

    /*!
     * @brief This function moves the value in member complex_map
     * @param _complex_map New value to be moved in member complex_map
     */
    eProsima_user_DllExport void complex_map(
            std::map<std::string, complex_sequence>&& _complex_map);

    /*!
     * @brief This function returns a constant reference to member complex_map
     * @return Constant reference to member complex_map
     */
    eProsima_user_DllExport const std::map<std::string, complex_sequence>& complex_map() const;

    /*!
     * @brief This function returns a reference to member complex_map
     * @return Reference to member complex_map
     */
    eProsima_user_DllExport std::map<std::string, complex_sequence>& complex_map();

private:

    std::map<std::string, complex_sequence> m_complex_map;

};

#endif // _FAST_DDS_GENERATED_TYPELOOKUPSERVICETYPES_H_

